// Generated by Dagger (https://dagger.dev).
package com.android.fetchhiringtask.di;

import com.android.fetchhiringtask.data.cloud.HiringRemoteDataSource;
import com.android.fetchhiringtask.data.repository.HiringRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class AppModule_ProvideUserRepositoryFactory implements Factory<HiringRepository> {
  private final Provider<HiringRemoteDataSource> hiringRemoteDataSourceProvider;

  public AppModule_ProvideUserRepositoryFactory(
      Provider<HiringRemoteDataSource> hiringRemoteDataSourceProvider) {
    this.hiringRemoteDataSourceProvider = hiringRemoteDataSourceProvider;
  }

  @Override
  public HiringRepository get() {
    return provideUserRepository(hiringRemoteDataSourceProvider.get());
  }

  public static AppModule_ProvideUserRepositoryFactory create(
      Provider<HiringRemoteDataSource> hiringRemoteDataSourceProvider) {
    return new AppModule_ProvideUserRepositoryFactory(hiringRemoteDataSourceProvider);
  }

  public static HiringRepository provideUserRepository(
      HiringRemoteDataSource hiringRemoteDataSource) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideUserRepository(hiringRemoteDataSource));
  }
}
