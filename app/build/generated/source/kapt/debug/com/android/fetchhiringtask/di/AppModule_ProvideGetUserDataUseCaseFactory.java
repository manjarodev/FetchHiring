// Generated by Dagger (https://dagger.dev).
package com.android.fetchhiringtask.di;

import com.android.fetchhiringtask.data.repository.HiringRepository;
import com.android.fetchhiringtask.data.usecase.GetHiringDataUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class AppModule_ProvideGetUserDataUseCaseFactory implements Factory<GetHiringDataUseCase> {
  private final Provider<HiringRepository> hiringRepositoryProvider;

  public AppModule_ProvideGetUserDataUseCaseFactory(
      Provider<HiringRepository> hiringRepositoryProvider) {
    this.hiringRepositoryProvider = hiringRepositoryProvider;
  }

  @Override
  public GetHiringDataUseCase get() {
    return provideGetUserDataUseCase(hiringRepositoryProvider.get());
  }

  public static AppModule_ProvideGetUserDataUseCaseFactory create(
      Provider<HiringRepository> hiringRepositoryProvider) {
    return new AppModule_ProvideGetUserDataUseCaseFactory(hiringRepositoryProvider);
  }

  public static GetHiringDataUseCase provideGetUserDataUseCase(HiringRepository hiringRepository) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideGetUserDataUseCase(hiringRepository));
  }
}
